model=Sequential()

model.add(Conv2D(16,(3,3), 1, activation='relu', input_shape=(256,256,3))) #Input layer: Filters=16, Filter Size=(3,3), Stride= 1
model.add(MaxPooling2D()) #First maxpooling layer. Reduces size of feature maps by taking max value in a pool size (default pool size= 2x2)

model.add(Conv2D(32,(3,3),1, activation='relu')) #2nd convolutional layer 
model.add(MaxPooling2D())

model.add(Conv2D(16,(3,3),1, activation='relu')) #3rd convolutional layer
model.add(MaxPooling2D())

model.add(Flatten()) #flattened out matrices to align the values in a single dimension (1D)

model.add(Dense(256,activation='relu', kernel_regularizer=l2(0.007))) #fully connected dense layer with 256 nodes
model.add(Dense(1,activation='sigmoid')) #output layer
#model.add(Dense(1,activation='sigmoid',kernel_regularizer=l2(0.01))) #output layer

model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics= ['accuracy'])

model.summary()

hist=model.fit(train,epochs=10, validation_data=val)
